---
title: "assignment6"
format: gfm
editor: visual
---

```{r}
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(knitr)
```

**1.1 Create the following tibble manually, first using `tribble()` and then using `tibble().` Print both results. \[We didn't have time to cover this in class, but look up how these functions work here**

```{r}
tibble (a=1:2,
          b=2.1:3.2,
          c="apple","orange")
```

```{r}
tribble(
 ~a, ~b, ~c,
 
 #--|--|----
 1, 2.1, "apple",
 2, 3.2, "orange")
```

1.3 Import https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.

```{r}
fruit <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt",skip=2, delim=";", quote ="/", na=c("?","Not Available"))

fruit
```

1.5 Import https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset5.txt into R. Parse the columns properly. As a reminder, you can read about parsing date and time data here. Write this imported and parsed data frame into a new csv file named dataset5_new.csv in your problem_sets folder.

```{r}
fruit2 <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset5.txt", delim=" ")

fruit_clean <- fruit2 |> mutate(Expiration_date=parse_date(`Expiration Date`, format="%B %d, %Y"))

write_csv(fruit_clean,file="fruit.csv")
```

***Exercise 2. Weather station***

2.1 Variable descriptions The text file https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt contains descriptions of different variables collected by the station.

Import it into R and print it in a table as shown below with kable().

```{r}
weather <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt", delim="-") 

weather |> kable()
```

#### **2.2 Data tidying**

-   Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv` into R. As you can see, this dataset is a classic example of untidy data: values of a variable (i.e.Â hour of the day) are stored as column names; variable names are stored in the `item` column.

-   Clean this dataset up and restructure it into a tidy format.

-   Parse the `date` variable into date format and parse `hour` into time.

-   Turn all invalid values into `NA` and turn `NR` in rainfall into `0`.

-   Parse all values into numbers.

-   Show the first 6 rows and 10 columns of this cleaned dataset, as shown below, *without* using `kable()`.

*Hints: you don\'t have to perform these tasks in the given order; also, warning messages are not necessarily signs of trouble.*

Before cleaning:

```{r}
weather2 <- read_csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv", col_types = cols(.default="c")) 

head(weather2) 
```

Cleaning Process

```{r}
weather2_clean <-weather2 |> pivot_longer(c("00","01","02","03","04","05","06","07","08","09",
"10","11","12","13","14","15","16","17","18","19","20","21","22","23"),
names_to="hour")|> 
pivot_wider(values_from = value, names_from = item) |> 
mutate(date=parse_date(date,format = "%Y/%m/%d")) |> 
mutate(hour=parse_time(hour,format="%h")) |> 
mutate(rainfall=parse_double(rainfall))

view(weather2_clean)
```

After Cleaning

```{r}
weather2_clean |> head(10)
```

2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.

```{r}
weather2_clean |> 
  filter(date=="2015/09/25") |> 
  ggplot() + geom_point(mapping = aes(x=hour,y=AMB_TEMP)) 
```{r}